{"version":3,"sources":["contact.png","components/HeaderLayout.js","components/Landing.js","components/Portfolio.js","components/Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","HeaderLayout","react_default","a","createElement","Menu","fixed","Container","Item","as","header","src","logo","alt","style","marginRight","Link","name","to","ContentLayout","text","marginTop","Header","App","react_router_dom","components_HeaderLayout","react_router","exact","path","component","Landing","Portfolio","Contact","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mOCyBzBC,EAhBM,kBACnBC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAM,OACVJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACC,EAAA,EAAKG,KAAN,CAAWC,GAAG,IAAIC,QAAM,GACxBR,EAAAC,EAAAC,cAAA,OAAKO,IAAKC,IAAMC,IAAI,OAAMC,MAAO,CAAEC,YAAa,WADhD,eAIAb,EAAAC,EAAAC,cAACC,EAAA,EAAKG,KAAN,CAAWC,GAAKO,IAAOC,KAAK,IAAIC,GAAG,KAAnC,QACAhB,EAAAC,EAAAC,cAACC,EAAA,EAAKG,KAAN,CAAWC,GAAKO,IAAOC,KAAK,YAAYC,GAAG,aAA3C,aACAhB,EAAAC,EAAAC,cAACC,EAAA,EAAKG,KAAN,CAAWC,GAAKO,IAAOC,KAAK,UAAUC,GAAG,WAAzC,wBCDOC,EAZO,kBACpBjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWa,MAAI,EAACN,MAAO,CAAEO,UAAW,QAClCnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQb,GAAG,MAAX,4BACAP,EAAAC,EAAAC,cAAA,6EACAF,EAAAC,EAAAC,cAAA,2GCOSe,EAZO,kBACpBjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWa,MAAI,EAACN,MAAO,CAAEO,UAAW,QAClCnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQb,GAAG,MAAX,aACAP,EAAAC,EAAAC,cAAA,6EACAF,EAAAC,EAAAC,cAAA,2GCOSe,EAZO,kBACpBjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWa,MAAI,EAACN,MAAO,CAAEO,UAAW,QAClCnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQb,GAAG,MAAX,WACAP,EAAAC,EAAAC,cAAA,6EACAF,EAAAC,EAAAC,cAAA,mHCWSmB,EAdH,kBACVrB,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACEtB,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACExB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC5B,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,UAAWE,IAC1C7B,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWG,QCJ9BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECVNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.75fcc0b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/contact.9201ae74.png\";","import React from 'react'\nimport  logo  from '../contact.png'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Container,\n  Menu,\n} from 'semantic-ui-react'\n\nconst HeaderLayout = () => (\n  <div>\n    <Menu fixed='top'>\n      <Container>\n        <Menu.Item as='a' header>\n        <img src={logo} alt=\"Logo\"style={{ marginRight: '0.3em' }}  />\n          New Panuwat\n        </Menu.Item>\n        <Menu.Item as={ Link } name='/' to='/'>Home</Menu.Item>\n        <Menu.Item as={ Link } name='portfolio' to='portfolio'>Portfolio</Menu.Item>\n        <Menu.Item as={ Link } name='contact' to='contact'>Contact</Menu.Item>\n      </Container>\n    </Menu>\n  </div>\n)\n\nexport default HeaderLayout","import React from 'react'\nimport {\n  Container,\n  Header,\n} from 'semantic-ui-react'\n\nconst ContentLayout = () => (\n  <div>\n    <Container text style={{ marginTop: '7em' }}>\n      <Header as='h1'>Panuwat Boonrod -> [New]</Header>\n      <p>This is a basic fixed menu template using fixed size containers.</p>\n      <p>\n        A text container is used for the main container, which is useful for single column layouts.\n      </p>\n    </Container>\n  </div>\n)\n\nexport default ContentLayout","import React from 'react'\nimport {\n  Container,\n  Header,\n} from 'semantic-ui-react'\n\nconst ContentLayout = () => (\n  <div>\n    <Container text style={{ marginTop: '7em' }}>\n      <Header as='h1'>Portfolio</Header>\n      <p>This is a basic fixed menu template using fixed size containers.</p>\n      <p>\n        A text container is used for the main container, which is useful for single column layouts.\n      </p>\n    </Container>\n  </div>\n)\n\nexport default ContentLayout","import React from 'react'\nimport {\n  Container,\n  Header,\n} from 'semantic-ui-react'\n\nconst ContentLayout = () => (\n  <div>\n    <Container text style={{ marginTop: '7em' }}>\n      <Header as='h1'>Contact</Header>\n      <p>This is a basic fixed menu template using fixed size containers.</p>\n      <p>\n        A text container is used for the main container, which is useful for single column layouts.\n      </p>\n    </Container>\n  </div>\n)\n\nexport default ContentLayout","import React from 'react'\nimport HeaderLayout from './components/HeaderLayout'\nimport Landing from './components/Landing';\nimport Portfolio from './components/Portfolio';\nimport Contact from './components/Contact';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\"\n\n\nconst App = () => (\n  <div>\n\n      <Router>\n        <HeaderLayout />\n        <Switch>\n          <Route exact path=\"/\" component={Landing} />\n          <Route exact path=\"/portfolio\" component={Portfolio} />\n          <Route exact path=\"/contact\" component={Contact} />\n        </Switch>\n      </Router>\n  </div>\n)\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}